{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SecureService An Introduction Hello and welcome, API dweller, and welcome to the SecureService API documentation! Each API endpoint comes with the required parameters, a description of what is does, and examples in tons of langauges! Happy POSTing!","title":"Welcome to SecureService"},{"location":"#welcome-to-secureservice","text":"","title":"Welcome to SecureService"},{"location":"#an-introduction","text":"Hello and welcome, API dweller, and welcome to the SecureService API documentation! Each API endpoint comes with the required parameters, a description of what is does, and examples in tons of langauges! Happy POSTing!","title":"An Introduction"},{"location":"API/Demote/","text":"Demote [POST] /api/demote/ This endpoint demotes the specified user. Request Body Body Description Type key Your paid gamekey STRING user The user who you want to demote INTEGER group The group which the user is in INTEGER Examples Javascript Luau/Lua 5.2 Python Golang async function sendReqest () { const response = await fetch ( 'http://node.justbillyh.xyz:2012/api/demote' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' }, body : JSON . stringify ({ key : 'GAMEKEY' , user : 'USER ID HERE' , group : 'GROUP ID HERE' }) }); return response . json (); } local HttpService = game : GetService ( \"HttpService\" ) local URL = \"http://node.justbillyh.xyz/api/demote\" local function request () local response = HttpService : RequestAsync ( { Url = URL , Method = \"POST\" , Headers = { [ \"Content-Type\" ] = \"application/json\" }, Body = HttpService : JSONEncode ({ key = \"GAMEKEY\" , user = \"USER ID HERE\" , group = \"GROUP ID HERE\" }) } ) if response . Success then print ( \"Status code:\" , response . StatusCode , response . StatusMessage ) print ( \"Response body: \\n \" , response . Body ) else print ( \"The request failed:\" , response . StatusCode , response . StatusMessage ) end end local success , message = pcall ( request ) if not success then print ( \"Http Request failed:\" , message ) end import requests r = requests . post ( 'http://node.justbillyh.xyz:2012/api/demote' , data = { 'key' : 'GAMEKEY' , 'user' : 'USER ID HERE' , 'group' : 'GROUP ID HERE' }) import ( \"bytes\" \"encoding/json\" \"io/ioutil\" \"log\" \"net/http\" ) func main () { postBody , _ := json . Marshal ( map [ string ] string { \"key\" : \"GAMEKEY HERE\" , \"user\" : \"USER ID HERE\" , \"group\" : \"GROUP ID HERE\" , }) responseBody := bytes . NewBuffer ( postBody ) resp , err := http . Post ( \"http://node.justbillyh.xyz/api/demote\" , \"application/json\" , responseBody ) if err != nil { log . Fatalf ( \"An Error Occured %v\" , err ) } defer resp . Body . Close () body , err := ioutil . ReadAll ( resp . Body ) if err != nil { log . Fatalln ( err ) } sb := string ( body ) log . Printf ( sb ) }","title":"Demote [POST]"},{"location":"API/Demote/#demote-post","text":"/api/demote/ This endpoint demotes the specified user.","title":"Demote [POST]"},{"location":"API/Demote/#request-body","text":"Body Description Type key Your paid gamekey STRING user The user who you want to demote INTEGER group The group which the user is in INTEGER","title":"Request Body"},{"location":"API/Demote/#examples","text":"Javascript Luau/Lua 5.2 Python Golang async function sendReqest () { const response = await fetch ( 'http://node.justbillyh.xyz:2012/api/demote' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' }, body : JSON . stringify ({ key : 'GAMEKEY' , user : 'USER ID HERE' , group : 'GROUP ID HERE' }) }); return response . json (); } local HttpService = game : GetService ( \"HttpService\" ) local URL = \"http://node.justbillyh.xyz/api/demote\" local function request () local response = HttpService : RequestAsync ( { Url = URL , Method = \"POST\" , Headers = { [ \"Content-Type\" ] = \"application/json\" }, Body = HttpService : JSONEncode ({ key = \"GAMEKEY\" , user = \"USER ID HERE\" , group = \"GROUP ID HERE\" }) } ) if response . Success then print ( \"Status code:\" , response . StatusCode , response . StatusMessage ) print ( \"Response body: \\n \" , response . Body ) else print ( \"The request failed:\" , response . StatusCode , response . StatusMessage ) end end local success , message = pcall ( request ) if not success then print ( \"Http Request failed:\" , message ) end import requests r = requests . post ( 'http://node.justbillyh.xyz:2012/api/demote' , data = { 'key' : 'GAMEKEY' , 'user' : 'USER ID HERE' , 'group' : 'GROUP ID HERE' }) import ( \"bytes\" \"encoding/json\" \"io/ioutil\" \"log\" \"net/http\" ) func main () { postBody , _ := json . Marshal ( map [ string ] string { \"key\" : \"GAMEKEY HERE\" , \"user\" : \"USER ID HERE\" , \"group\" : \"GROUP ID HERE\" , }) responseBody := bytes . NewBuffer ( postBody ) resp , err := http . Post ( \"http://node.justbillyh.xyz/api/demote\" , \"application/json\" , responseBody ) if err != nil { log . Fatalf ( \"An Error Occured %v\" , err ) } defer resp . Body . Close () body , err := ioutil . ReadAll ( resp . Body ) if err != nil { log . Fatalln ( err ) } sb := string ( body ) log . Printf ( sb ) }","title":"Examples"},{"location":"API/HandleRequest/","text":"Handle Join Request [POST] /api/handlerequest/ This endpoint accepts or denies the provided join request. Request Body Body Description Type key Your paid gamekey STRING user The user who's join request you want to handle INTEGER group The group which you want to look for the join request INTEGER accept Should the join request be accepted? BOOLEAN Examples Javascript Luau Python Golang async function sendReqest () { const response = await fetch ( 'http://node.justbillyh.xyz:2012/api/handlerequest' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' }, body : JSON . stringify ({ key : 'GAMEKEY' , user : 'USER ID HERE' , group : 'GROUP ID HERE' , accept : true / false }) }); return response . json (); } local HttpService = game : GetService ( \"HttpService\" ) local URL = \"http://node.justbillyh.xyz/api/handlerequest\" local function request () local response = HttpService : RequestAsync ( { Url = URL , Method = \"POST\" , Headers = { [ \"Content-Type\" ] = \"application/json\" }, Body = HttpService : JSONEncode ({ key = \"GAMEKEY\" , user = \"USER ID HERE\" , group = \"GROUP ID HERE\" , accept : true / false }) } ) if response . Success then print ( \"Status code:\" , response . StatusCode , response . StatusMessage ) print ( \"Response body: \\n \" , response . Body ) else print ( \"The request failed:\" , response . StatusCode , response . StatusMessage ) end end local success , message = pcall ( request ) if not success then print ( \"Http Request failed:\" , message ) end import requests r = requests . post ( 'http://node.justbillyh.xyz:2012/api/handlejoin' , data = { 'key' : 'GAMEKEY' , 'user' : 'USER ID HERE' , 'group' : 'GROUP ID HERE' , accept : true / false }) import ( \"bytes\" \"encoding/json\" \"io/ioutil\" \"log\" \"net/http\" ) func main () { postBody , _ := json . Marshal ( map [ string ] string { \"key\" : \"GAMEKEY HERE\" , \"user\" : \"USER ID HERE\" , \"group\" : \"GROUP ID HERE\" , \"accept\" : \"true/false\" }) responseBody := bytes . NewBuffer ( postBody ) resp , err := http . Post ( \"http://node.justbillyh.xyz/api/handlerequest\" , \"application/json\" , responseBody ) if err != nil { log . Fatalf ( \"An Error Occured %v\" , err ) } defer resp . Body . Close () body , err := ioutil . ReadAll ( resp . Body ) if err != nil { log . Fatalln ( err ) } sb := string ( body ) log . Printf ( sb ) }","title":"Handle Join Request [POST]"},{"location":"API/HandleRequest/#handle-join-request-post","text":"/api/handlerequest/ This endpoint accepts or denies the provided join request.","title":"Handle Join Request [POST]"},{"location":"API/HandleRequest/#request-body","text":"Body Description Type key Your paid gamekey STRING user The user who's join request you want to handle INTEGER group The group which you want to look for the join request INTEGER accept Should the join request be accepted? BOOLEAN","title":"Request Body"},{"location":"API/HandleRequest/#examples","text":"Javascript Luau Python Golang async function sendReqest () { const response = await fetch ( 'http://node.justbillyh.xyz:2012/api/handlerequest' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' }, body : JSON . stringify ({ key : 'GAMEKEY' , user : 'USER ID HERE' , group : 'GROUP ID HERE' , accept : true / false }) }); return response . json (); } local HttpService = game : GetService ( \"HttpService\" ) local URL = \"http://node.justbillyh.xyz/api/handlerequest\" local function request () local response = HttpService : RequestAsync ( { Url = URL , Method = \"POST\" , Headers = { [ \"Content-Type\" ] = \"application/json\" }, Body = HttpService : JSONEncode ({ key = \"GAMEKEY\" , user = \"USER ID HERE\" , group = \"GROUP ID HERE\" , accept : true / false }) } ) if response . Success then print ( \"Status code:\" , response . StatusCode , response . StatusMessage ) print ( \"Response body: \\n \" , response . Body ) else print ( \"The request failed:\" , response . StatusCode , response . StatusMessage ) end end local success , message = pcall ( request ) if not success then print ( \"Http Request failed:\" , message ) end import requests r = requests . post ( 'http://node.justbillyh.xyz:2012/api/handlejoin' , data = { 'key' : 'GAMEKEY' , 'user' : 'USER ID HERE' , 'group' : 'GROUP ID HERE' , accept : true / false }) import ( \"bytes\" \"encoding/json\" \"io/ioutil\" \"log\" \"net/http\" ) func main () { postBody , _ := json . Marshal ( map [ string ] string { \"key\" : \"GAMEKEY HERE\" , \"user\" : \"USER ID HERE\" , \"group\" : \"GROUP ID HERE\" , \"accept\" : \"true/false\" }) responseBody := bytes . NewBuffer ( postBody ) resp , err := http . Post ( \"http://node.justbillyh.xyz/api/handlerequest\" , \"application/json\" , responseBody ) if err != nil { log . Fatalf ( \"An Error Occured %v\" , err ) } defer resp . Body . Close () body , err := ioutil . ReadAll ( resp . Body ) if err != nil { log . Fatalln ( err ) } sb := string ( body ) log . Printf ( sb ) }","title":"Examples"},{"location":"API/Promote/","text":"Promote [POST] /api/promote/ This endpoint promotes the specified user. Request Body Body Description Type key Your paid gamekey STRING user The user who you want to promote INTEGER group The group which the user is in INTEGER Examples Javascript Luau/Lua 5.2 Python Golang async function sendReqest () { const response = await fetch ( 'http://node.justbillyh.xyz:2012/api/promote' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' }, body : JSON . stringify ({ key : 'GAMEKEY' , user : 'USER ID HERE' , group : 'GROUP ID HERE' }) }); return response . json (); } local HttpService = game : GetService ( \"HttpService\" ) local URL = \"http://node.justbillyh.xyz/api/promote\" local function request () local response = HttpService : RequestAsync ( { Url = URL , Method = \"POST\" , Headers = { [ \"Content-Type\" ] = \"application/json\" }, Body = HttpService : JSONEncode ({ key = \"GAMEKEY\" , user = \"USER ID HERE\" , group = \"GROUP ID HERE\" }) } ) if response . Success then print ( \"Status code:\" , response . StatusCode , response . StatusMessage ) print ( \"Response body: \\n \" , response . Body ) else print ( \"The request failed:\" , response . StatusCode , response . StatusMessage ) end end local success , message = pcall ( request ) if not success then print ( \"Http Request failed:\" , message ) end import requests r = requests . post ( 'http://node.justbillyh.xyz:2012/api/promote' , data = { 'key' : 'GAMEKEY' , 'user' : 'USER ID HERE' , 'group' : 'GROUP ID HERE' }) import ( \"bytes\" \"encoding/json\" \"io/ioutil\" \"log\" \"net/http\" ) func main () { postBody , _ := json . Marshal ( map [ string ] string { \"key\" : \"GAMEKEY HERE\" , \"user\" : \"USER ID HERE\" , \"group\" : \"GROUP ID HERE\" , }) responseBody := bytes . NewBuffer ( postBody ) resp , err := http . Post ( \"http://node.justbillyh.xyz/api/promote\" , \"application/json\" , responseBody ) if err != nil { log . Fatalf ( \"An Error Occured %v\" , err ) } defer resp . Body . Close () body , err := ioutil . ReadAll ( resp . Body ) if err != nil { log . Fatalln ( err ) } sb := string ( body ) log . Printf ( sb ) }","title":"Promote [POST]"},{"location":"API/Promote/#promote-post","text":"/api/promote/ This endpoint promotes the specified user.","title":"Promote [POST]"},{"location":"API/Promote/#request-body","text":"Body Description Type key Your paid gamekey STRING user The user who you want to promote INTEGER group The group which the user is in INTEGER","title":"Request Body"},{"location":"API/Promote/#examples","text":"Javascript Luau/Lua 5.2 Python Golang async function sendReqest () { const response = await fetch ( 'http://node.justbillyh.xyz:2012/api/promote' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' }, body : JSON . stringify ({ key : 'GAMEKEY' , user : 'USER ID HERE' , group : 'GROUP ID HERE' }) }); return response . json (); } local HttpService = game : GetService ( \"HttpService\" ) local URL = \"http://node.justbillyh.xyz/api/promote\" local function request () local response = HttpService : RequestAsync ( { Url = URL , Method = \"POST\" , Headers = { [ \"Content-Type\" ] = \"application/json\" }, Body = HttpService : JSONEncode ({ key = \"GAMEKEY\" , user = \"USER ID HERE\" , group = \"GROUP ID HERE\" }) } ) if response . Success then print ( \"Status code:\" , response . StatusCode , response . StatusMessage ) print ( \"Response body: \\n \" , response . Body ) else print ( \"The request failed:\" , response . StatusCode , response . StatusMessage ) end end local success , message = pcall ( request ) if not success then print ( \"Http Request failed:\" , message ) end import requests r = requests . post ( 'http://node.justbillyh.xyz:2012/api/promote' , data = { 'key' : 'GAMEKEY' , 'user' : 'USER ID HERE' , 'group' : 'GROUP ID HERE' }) import ( \"bytes\" \"encoding/json\" \"io/ioutil\" \"log\" \"net/http\" ) func main () { postBody , _ := json . Marshal ( map [ string ] string { \"key\" : \"GAMEKEY HERE\" , \"user\" : \"USER ID HERE\" , \"group\" : \"GROUP ID HERE\" , }) responseBody := bytes . NewBuffer ( postBody ) resp , err := http . Post ( \"http://node.justbillyh.xyz/api/promote\" , \"application/json\" , responseBody ) if err != nil { log . Fatalf ( \"An Error Occured %v\" , err ) } defer resp . Body . Close () body , err := ioutil . ReadAll ( resp . Body ) if err != nil { log . Fatalln ( err ) } sb := string ( body ) log . Printf ( sb ) }","title":"Examples"},{"location":"API/Setrank/","text":"Set Rank [POST] /api/setrank/ This endpoint sets the rank of a specified user. Request Body Body Description Type key Your paid gamekey STRING user The user who's join request you want to handle INTEGER group The group which you want to look for the join request INTEGER rankid The rank id you want the user ranked to INTEGER Examples Javascript Luau Python Golang async function sendReqest () { const response = await fetch ( 'http://node.justbillyh.xyz:2012/api/setrank' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' }, body : JSON . stringify ({ key : 'GAMEKEY' , user : 'USER ID HERE' , group : 'GROUP ID HERE' , rankid : 'RANK ID HERE' }) }); return response . json (); } local HttpService = game : GetService ( \"HttpService\" ) local URL = \"http://node.justbillyh.xyz/api/setrank\" local function request () local response = HttpService : RequestAsync ( { Url = URL , Method = \"POST\" , Headers = { [ \"Content-Type\" ] = \"application/json\" }, Body = HttpService : JSONEncode ({ key = \"GAMEKEY\" , user = \"USER ID HERE\" , group = \"GROUP ID HERE\" , rankid : \"RANK ID HERE\" }) } ) if response . Success then print ( \"Status code:\" , response . StatusCode , response . StatusMessage ) print ( \"Response body: \\n \" , response . Body ) else print ( \"The request failed:\" , response . StatusCode , response . StatusMessage ) end end local success , message = pcall ( request ) if not success then print ( \"Http Request failed:\" , message ) end import requests r = requests . post ( 'http://node.justbillyh.xyz:2012/api/setrank' , data = { 'key' : 'GAMEKEY' , 'user' : 'USER ID HERE' , 'group' : 'GROUP ID HERE' , rankid : 'RANK ID HERE' }) import ( \"bytes\" \"encoding/json\" \"io/ioutil\" \"log\" \"net/http\" ) func main () { postBody , _ := json . Marshal ( map [ string ] string { \"key\" : \"GAMEKEY HERE\" , \"user\" : \"USER ID HERE\" , \"group\" : \"GROUP ID HERE\" , \"rankid\" : \"RANK ID HERE\" }) responseBody := bytes . NewBuffer ( postBody ) resp , err := http . Post ( \"http://node.justbillyh.xyz/api/setrank\" , \"application/json\" , responseBody ) if err != nil { log . Fatalf ( \"An Error Occured %v\" , err ) } defer resp . Body . Close () body , err := ioutil . ReadAll ( resp . Body ) if err != nil { log . Fatalln ( err ) } sb := string ( body ) log . Printf ( sb ) }","title":"Set Rank [POST]"},{"location":"API/Setrank/#set-rank-post","text":"/api/setrank/ This endpoint sets the rank of a specified user.","title":"Set Rank [POST]"},{"location":"API/Setrank/#request-body","text":"Body Description Type key Your paid gamekey STRING user The user who's join request you want to handle INTEGER group The group which you want to look for the join request INTEGER rankid The rank id you want the user ranked to INTEGER","title":"Request Body"},{"location":"API/Setrank/#examples","text":"Javascript Luau Python Golang async function sendReqest () { const response = await fetch ( 'http://node.justbillyh.xyz:2012/api/setrank' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' }, body : JSON . stringify ({ key : 'GAMEKEY' , user : 'USER ID HERE' , group : 'GROUP ID HERE' , rankid : 'RANK ID HERE' }) }); return response . json (); } local HttpService = game : GetService ( \"HttpService\" ) local URL = \"http://node.justbillyh.xyz/api/setrank\" local function request () local response = HttpService : RequestAsync ( { Url = URL , Method = \"POST\" , Headers = { [ \"Content-Type\" ] = \"application/json\" }, Body = HttpService : JSONEncode ({ key = \"GAMEKEY\" , user = \"USER ID HERE\" , group = \"GROUP ID HERE\" , rankid : \"RANK ID HERE\" }) } ) if response . Success then print ( \"Status code:\" , response . StatusCode , response . StatusMessage ) print ( \"Response body: \\n \" , response . Body ) else print ( \"The request failed:\" , response . StatusCode , response . StatusMessage ) end end local success , message = pcall ( request ) if not success then print ( \"Http Request failed:\" , message ) end import requests r = requests . post ( 'http://node.justbillyh.xyz:2012/api/setrank' , data = { 'key' : 'GAMEKEY' , 'user' : 'USER ID HERE' , 'group' : 'GROUP ID HERE' , rankid : 'RANK ID HERE' }) import ( \"bytes\" \"encoding/json\" \"io/ioutil\" \"log\" \"net/http\" ) func main () { postBody , _ := json . Marshal ( map [ string ] string { \"key\" : \"GAMEKEY HERE\" , \"user\" : \"USER ID HERE\" , \"group\" : \"GROUP ID HERE\" , \"rankid\" : \"RANK ID HERE\" }) responseBody := bytes . NewBuffer ( postBody ) resp , err := http . Post ( \"http://node.justbillyh.xyz/api/setrank\" , \"application/json\" , responseBody ) if err != nil { log . Fatalf ( \"An Error Occured %v\" , err ) } defer resp . Body . Close () body , err := ioutil . ReadAll ( resp . Body ) if err != nil { log . Fatalln ( err ) } sb := string ( body ) log . Printf ( sb ) }","title":"Examples"},{"location":"API/Shout/","text":"Shout [POST] /api/shout/ This endpoint shouts a specified message in the specified group. Request Body Body Description Type key Your paid gamekey STRING group The group which you want to look for the join request INTEGER body The message you want posted on the shout STRING Examples Javascript Luau Python Golang async function sendReqest () { const response = await fetch ( 'http://node.justbillyh.xyz:2012/api/shout' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' }, body : JSON . stringify ({ key : 'GAMEKEY' , group : 'GROUP ID HERE' , body : 'SHOUT MESSAGE HERE' }) }); return response . json (); } local HttpService = game : GetService ( \"HttpService\" ) local URL = \"http://node.justbillyh.xyz/api/shout\" local function request () local response = HttpService : RequestAsync ( { Url = URL , Method = \"POST\" , Headers = { [ \"Content-Type\" ] = \"application/json\" }, Body = HttpService : JSONEncode ({ key = \"GAMEKEY\" , group = \"GROUP ID HERE\" , body : \"SHOUT MESSAGE HERE\" }) } ) if response . Success then print ( \"Status code:\" , response . StatusCode , response . StatusMessage ) print ( \"Response body: \\n \" , response . Body ) else print ( \"The request failed:\" , response . StatusCode , response . StatusMessage ) end end local success , message = pcall ( request ) if not success then print ( \"Http Request failed:\" , message ) end import requests r = requests . post ( 'http://node.justbillyh.xyz:2012/api/shout' , data = { 'key' : 'GAMEKEY' , 'group' : 'GROUP ID HERE' , body : 'SHOUT MESSAGE HERE' }) import ( \"bytes\" \"encoding/json\" \"io/ioutil\" \"log\" \"net/http\" ) func main () { postBody , _ := json . Marshal ( map [ string ] string { \"key\" : \"GAMEKEY HERE\" , \"group\" : \"GROUP ID HERE\" , \"body\" : \"SHOUT MESSAGE HERE\" }) responseBody := bytes . NewBuffer ( postBody ) resp , err := http . Post ( \"http://node.justbillyh.xyz/api/shout\" , \"application/json\" , responseBody ) if err != nil { log . Fatalf ( \"An Error Occured %v\" , err ) } defer resp . Body . Close () body , err := ioutil . ReadAll ( resp . Body ) if err != nil { log . Fatalln ( err ) } sb := string ( body ) log . Printf ( sb ) }","title":"Shout [POST]"},{"location":"API/Shout/#shout-post","text":"/api/shout/ This endpoint shouts a specified message in the specified group.","title":"Shout [POST]"},{"location":"API/Shout/#request-body","text":"Body Description Type key Your paid gamekey STRING group The group which you want to look for the join request INTEGER body The message you want posted on the shout STRING","title":"Request Body"},{"location":"API/Shout/#examples","text":"Javascript Luau Python Golang async function sendReqest () { const response = await fetch ( 'http://node.justbillyh.xyz:2012/api/shout' , { method : 'POST' , headers : { 'Content-Type' : 'application/json' }, body : JSON . stringify ({ key : 'GAMEKEY' , group : 'GROUP ID HERE' , body : 'SHOUT MESSAGE HERE' }) }); return response . json (); } local HttpService = game : GetService ( \"HttpService\" ) local URL = \"http://node.justbillyh.xyz/api/shout\" local function request () local response = HttpService : RequestAsync ( { Url = URL , Method = \"POST\" , Headers = { [ \"Content-Type\" ] = \"application/json\" }, Body = HttpService : JSONEncode ({ key = \"GAMEKEY\" , group = \"GROUP ID HERE\" , body : \"SHOUT MESSAGE HERE\" }) } ) if response . Success then print ( \"Status code:\" , response . StatusCode , response . StatusMessage ) print ( \"Response body: \\n \" , response . Body ) else print ( \"The request failed:\" , response . StatusCode , response . StatusMessage ) end end local success , message = pcall ( request ) if not success then print ( \"Http Request failed:\" , message ) end import requests r = requests . post ( 'http://node.justbillyh.xyz:2012/api/shout' , data = { 'key' : 'GAMEKEY' , 'group' : 'GROUP ID HERE' , body : 'SHOUT MESSAGE HERE' }) import ( \"bytes\" \"encoding/json\" \"io/ioutil\" \"log\" \"net/http\" ) func main () { postBody , _ := json . Marshal ( map [ string ] string { \"key\" : \"GAMEKEY HERE\" , \"group\" : \"GROUP ID HERE\" , \"body\" : \"SHOUT MESSAGE HERE\" }) responseBody := bytes . NewBuffer ( postBody ) resp , err := http . Post ( \"http://node.justbillyh.xyz/api/shout\" , \"application/json\" , responseBody ) if err != nil { log . Fatalf ( \"An Error Occured %v\" , err ) } defer resp . Body . Close () body , err := ioutil . ReadAll ( resp . Body ) if err != nil { log . Fatalln ( err ) } sb := string ( body ) log . Printf ( sb ) }","title":"Examples"}]}